(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; RefUnwindSafe for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; RefUnwindSafe for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; RefUnwindSafe for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; RefUnwindSafe for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; RefUnwindSafe for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Searcher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchKind","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl RefUnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LittleEndian","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for TryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Select&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryReadyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrySelectError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Receiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Injector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Stealer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for Atomic&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T:&nbsp;?Sized, P&gt; RefUnwindSafe for CompareAndSetError&lt;'g, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T:&nbsp;?Sized&gt; RefUnwindSafe for Shared&lt;'g, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Collector","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalHandle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Guard","synthetic":true,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for ArrayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SegQueue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Backoff","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parker","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Unparker","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !RefUnwindSafe for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; !RefUnwindSafe for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; RefUnwindSafe for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLock&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crypto"] = [{"text":"impl RefUnwindSafe for KeySize","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for AesGcm&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AesSafe128Encryptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AesSafe128Decryptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AesSafe192Encryptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AesSafe192Decryptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AesSafe256Encryptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AesSafe256Decryptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AesSafe128EncryptorX8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AesSafe128DecryptorX8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AesSafe192EncryptorX8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AesSafe192DecryptorX8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AesSafe256EncryptorX8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AesSafe256DecryptorX8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Blake2b","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Blake2s","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoPadding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PkcsPadding","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for EncPadding&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for DecPadding&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, X&gt; RefUnwindSafe for EcbEncryptor&lt;T, X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, X&gt; RefUnwindSafe for EcbDecryptor&lt;T, X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, X&gt; RefUnwindSafe for CbcEncryptor&lt;T, X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, X&gt; RefUnwindSafe for CbcDecryptor&lt;T, X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for CtrMode&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for CtrModeX8&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Blowfish","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RefReadBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnedReadBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RefWriteBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BorrowedWriteBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnedWriteBuffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha20","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha20Poly1305","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeP2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeP3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeP1P1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GePrecomp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeCached","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fortuna","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ghash","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GhashWithC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Hc128","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MacResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Md5","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Poly1305","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rc4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ripemd160","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Salsa20","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScryptParams","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha512","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha384","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha512Trunc256","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha512Trunc224","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha256","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha224","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha3Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sosemanuk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SymmetricCipherError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Whirlpool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AesNiEncryptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AesNiDecryptor","synthetic":true,"types":[]}];
implementors["filetime"] = [{"text":"impl RefUnwindSafe for FileTime","synthetic":true,"types":[]}];
implementors["gnuplot"] = [{"text":"impl RefUnwindSafe for Axes2D","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Axes3D","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GnuplotInitError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CloseSentinel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Figure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GnuplotVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Coordinate","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PlotOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XAxis","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for YAxis","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FillRegionType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlignType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DashType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArrowheadType","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AutoOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LabelOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TickOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for Tick&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BorderLocation2D","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MarginSide","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LegendOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContourStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PaletteType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FillPatternType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MultiplotFillOrder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MultiplotFillDirection","synthetic":true,"types":[]}];
implementors["jwalk"] = [{"text":"impl !RefUnwindSafe for DirEntry","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DirEntryIter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReadDirSpec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WalkDir","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl RefUnwindSafe for c_void","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FILE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for fpos_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DIR","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for dirent_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for glob_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for timeval","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for timespec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for rlimit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for timezone","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for rusage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sockaddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sockaddr_in","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for in_addr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for in6_addr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ip_mreq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ip6_mreq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for addrinfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sockaddr_un","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ifaddrs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for utimbuf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sockaddr_ll","synthetic":true,"types":[]}];
implementors["libxml"] = [{"text":"impl RefUnwindSafe for __fsid_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __mbstate_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _G_fpos_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _G_fpos64_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _IO_jump_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _IO_marker","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _IO_FILE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _IO_FILE_plus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlBuffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlBuf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlNotation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlEnumeration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlAttribute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlElementContent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlRegexp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlRegExecCtxt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlDict","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlExpCtxt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlExpNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlElement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlNs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlDtd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlAttr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlID","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlDoc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlDOMWrapCtxt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlHashTable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlLink","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlAutomata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlAutomataState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlValidState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlValidCtxt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlEntity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlParserInput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlParserNodeInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlParserNodeInfoSeq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlParserCtxt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSAXLocator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSAXHandler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSAXHandlerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for max_align_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UConverter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UConverterFromUnicodeArgs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UConverterToUnicodeArgs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UEnumeration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for USet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _uconv_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlCharEncodingHandler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for div_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ldiv_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for lldiv_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __sigset_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for timeval","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for timespec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for fd_set","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __pthread_rwlock_arch_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __pthread_internal_list","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __pthread_mutex_s","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __pthread_cond_s","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __pthread_cond_s__bindgen_ty_1__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __pthread_cond_s__bindgen_ty_2__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for random_data","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for drand48_data","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xlinkHandler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlGlobalState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlRMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlParserInputBuffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlOutputBuffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _htmlElemDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _htmlEntityDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlChSRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlChLRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlChRangeGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlNodeSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlXPathObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlXPathType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlXPathVariable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlXPathFunct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlXPathAxis","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlXPathContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlXPathCompExpr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlXPathParserContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlCatalog","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlShellCtxt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlPattern","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlStreamCtxt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlRelaxNG","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlRelaxNGParserCtxt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlRelaxNGValidCtxt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSchemaVal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSchemaAnnot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSchemaAttribute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSchemaAttributeLink","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSchemaWildcardNs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSchemaWildcard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSchemaAttributeGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSchemaTypeLink","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSchemaFacetLink","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSchemaType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSchemaElement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSchemaFacet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSchemaNotation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSchema","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSchematron","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSchematronParserCtxt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSchematronValidCtxt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlURI","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlXIncludeCtxt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlModule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSchemaParserCtxt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSchemaValidCtxt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSchemaSAXPlug","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlTextReader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlSaveCtxt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlTextWriter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _xmlLocationSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __va_list_tag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __mbstate_t__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __pthread_cond_s__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __pthread_cond_s__bindgen_ty_2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pthread_barrier_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pthread_barrierattr_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XmlParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SaveOptions","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Document","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Namespace","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Node","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodeType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StructuredError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Object","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SchemaParserContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SchemaValidationContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoNode","synthetic":true,"types":[]}];
implementors["llamapun"] = [{"text":"impl RefUnwindSafe for LexicalOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RESOURCE_DOCUMENTS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StructuralEnv","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AmsEnv","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Corpus","synthetic":true,"types":[]},{"text":"impl&lt;'iter&gt; !RefUnwindSafe for DocumentIterator&lt;'iter&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; !RefUnwindSafe for Document&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'iter&gt; !RefUnwindSafe for ParagraphIterator&lt;'iter&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'p&gt; !RefUnwindSafe for Paragraph&lt;'p&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'iter&gt; !RefUnwindSafe for SentenceIterator&lt;'iter&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; !RefUnwindSafe for Sentence&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'iter&gt; !RefUnwindSafe for SimpleWordIterator&lt;'iter&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'iter&gt; !RefUnwindSafe for SennaWordIterator&lt;'iter&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'w&gt; !RefUnwindSafe for Word&lt;'w&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DNMParameters","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RuntimeParseData","synthetic":true,"types":[]},{"text":"impl&lt;'dnmrange&gt; RefUnwindSafe for DNMRange&lt;'dnmrange&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DNM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecialTagsOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dictionary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ngrams","synthetic":true,"types":[]},{"text":"impl&lt;'p&gt; !RefUnwindSafe for ItemDNM&lt;'p&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; !RefUnwindSafe for ItemDNMRange&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'iter&gt; !RefUnwindSafe for RoNodeIterator&lt;'iter&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'iter&gt; !RefUnwindSafe for DNMRangeIterator&lt;'iter&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Corpus","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; !RefUnwindSafe for Document&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MathMarker","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatternFile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatternMarker","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for TextMarker&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for MarkerEnum&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Tokenizer","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl RefUnwindSafe for IsaacRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Isaac64Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaChaRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XorShiftRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, R&gt; RefUnwindSafe for Generator&lt;'a, T, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; RefUnwindSafe for AsciiGenerator&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for Open01&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for Closed01&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StdRng","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThreadRng","synthetic":true,"types":[]},{"text":"impl&lt;Sup&gt; RefUnwindSafe for RandSample&lt;Sup&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Weighted&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for WeightedChoice&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for Range&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gamma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChiSquared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FisherF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StudentT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StandardNormal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Normal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogNormal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JitterRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimerError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; RefUnwindSafe for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReseedWithDefault","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for FlatMapIter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for FlattenIter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; RefUnwindSafe for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; RefUnwindSafe for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; RefUnwindSafe for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; RefUnwindSafe for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; RefUnwindSafe for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for Positions&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; RefUnwindSafe for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; RefUnwindSafe for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; RefUnwindSafe for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for Iter&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for Chunks&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for ChunksExact&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for Windows&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for IterMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for ChunksMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for ChunksExactMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; RefUnwindSafe for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; RefUnwindSafe for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for Split&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for SplitTerminator&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for Matches&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for MatchIndices&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Drain&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for Drain&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl !RefUnwindSafe for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !RefUnwindSafe for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !RefUnwindSafe for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThreadPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;DefaultSpawn&gt; !RefUnwindSafe for ThreadPoolBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Configuration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FnContext","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl RefUnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; RefUnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; RefUnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; RefUnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; RefUnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl !RefUnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WithComments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Comment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Alternation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Concat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassPerl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassAscii","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBracketed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Assertion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlagsItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssertionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaseFoldError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Hir","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HirKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WordBoundary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literals","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Translator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Range","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Sequence","synthetic":true,"types":[]}];
implementors["rustc_serialize"] = [{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharacterSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Newline","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromBase64Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromHexError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PrettyJson&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for AsJson&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for AsPrettyJson&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Encoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stack","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Parser&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Builder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Decoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Json","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ParserError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DecoderError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncoderError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for JsonEvent","synthetic":true,"types":[]},{"text":"impl&lt;'l&gt; RefUnwindSafe for StackElement&lt;'l&gt;","synthetic":true,"types":[]}];
implementors["same_file"] = [{"text":"impl RefUnwindSafe for Handle","synthetic":true,"types":[]}];
implementors["senna"] = [{"text":"impl RefUnwindSafe for SennaParseOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Senna","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Word&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Sentence&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PSGPhrase","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PSGNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for POS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Phrase","synthetic":true,"types":[]}];
implementors["tar"] = [{"text":"impl&lt;R&gt; !RefUnwindSafe for Archive&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !RefUnwindSafe for Entries&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Builder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !RefUnwindSafe for Entry&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GnuExtSparseHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GnuHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GnuSparseHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OldHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UstarHeader","synthetic":true,"types":[]},{"text":"impl&lt;'entry&gt; RefUnwindSafe for PaxExtension&lt;'entry&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'entry&gt; RefUnwindSafe for PaxExtensions&lt;'entry&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unpacked","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EntryType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeaderMode","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl RefUnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timespec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreciseTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SteadyTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TmFmt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]}];
implementors["walkdir"] = [{"text":"impl RefUnwindSafe for DirEntry","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WalkDir","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for FilterEntry&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["whatlang"] = [{"text":"impl RefUnwindSafe for Detector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Info","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lang","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Script","synthetic":true,"types":[]}];
implementors["xattr"] = [{"text":"impl RefUnwindSafe for UnsupportedPlatformError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XAttrs","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()