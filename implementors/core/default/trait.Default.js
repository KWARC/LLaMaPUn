(function() {var implementors = {};
implementors["ahash"] = [{"text":"impl Default for RandomState","synthetic":false,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl Default for AhoCorasickBuilder","synthetic":false,"types":[]},{"text":"impl Default for MatchKind","synthetic":false,"types":[]},{"text":"impl Default for MatchKind","synthetic":false,"types":[]},{"text":"impl Default for Config","synthetic":false,"types":[]},{"text":"impl Default for Builder","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl Default for BigEndian","synthetic":false,"types":[]},{"text":"impl Default for LittleEndian","synthetic":false,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;'a&gt; Default for Select&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; Default for Injector&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized + Pointable&gt; Default for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Pointable, '_&gt; Default for Shared&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl Default for Collector","synthetic":false,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl&lt;T&gt; Default for SegQueue&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T:&nbsp;Default&gt; Default for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Default&gt; Default for CachePadded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Default for Backoff","synthetic":false,"types":[]},{"text":"impl Default for Parker","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Default&gt; Default for ShardedLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Default for WaitGroup","synthetic":false,"types":[]}];
implementors["gnuplot"] = [{"text":"impl Default for GnuplotVersion","synthetic":false,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;K, V, S&gt; Default for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Default,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Default for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Eq + Hash,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["libxml"] = [{"text":"impl Default for Parser","synthetic":false,"types":[]},{"text":"impl Default for SaveOptions","synthetic":false,"types":[]}];
implementors["llamapun"] = [{"text":"impl Default for LexicalOptions","synthetic":false,"types":[]},{"text":"impl Default for Corpus","synthetic":false,"types":[]},{"text":"impl Default for RuntimeParseData","synthetic":false,"types":[]},{"text":"impl Default for DNMParameters","synthetic":false,"types":[]},{"text":"impl Default for DNM","synthetic":false,"types":[]},{"text":"impl Default for Dictionary","synthetic":false,"types":[]},{"text":"impl Default for Ngrams","synthetic":false,"types":[]},{"text":"impl Default for Corpus","synthetic":false,"types":[]},{"text":"impl Default for Tokenizer","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl Default for ReseedWithDefault","synthetic":false,"types":[]}];
implementors["rayon_core"] = [{"text":"impl Default for ThreadPoolBuilder","synthetic":false,"types":[]},{"text":"impl Default for Configuration","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Default for ParserBuilder","synthetic":false,"types":[]},{"text":"impl Default for TranslatorBuilder","synthetic":false,"types":[]},{"text":"impl Default for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Default for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Default for ParserBuilder","synthetic":false,"types":[]}];
implementors["senna"] = [{"text":"impl Default for SennaParseOptions","synthetic":false,"types":[]}];
implementors["tar"] = [{"text":"impl Default for GnuExtSparseHeader","synthetic":false,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T:&nbsp;Send&gt; Default for CachedThreadLocal&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Default for ThreadLocal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["whatlang"] = [{"text":"impl Default for Detector","synthetic":false,"types":[]},{"text":"impl Default for Options","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()