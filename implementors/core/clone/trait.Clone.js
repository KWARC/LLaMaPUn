(function() {var implementors = {};
implementors["ahash"] = [{"text":"impl Clone for AHasher","synthetic":false,"types":[]},{"text":"impl Clone for RandomState","synthetic":false,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S:&nbsp;Clone + StateID&gt; Clone for AhoCorasick&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for AhoCorasickBuilder","synthetic":false,"types":[]},{"text":"impl Clone for MatchKind","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for MatchKind","synthetic":false,"types":[]},{"text":"impl Clone for Config","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for Searcher","synthetic":false,"types":[]},{"text":"impl Clone for Match","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl Clone for BigEndian","synthetic":false,"types":[]},{"text":"impl Clone for LittleEndian","synthetic":false,"types":[]}];
implementors["circular_queue"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for CircularQueue&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Clone for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for SendTimeoutError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RecvError","synthetic":false,"types":[]},{"text":"impl Clone for TryRecvError","synthetic":false,"types":[]},{"text":"impl Clone for RecvTimeoutError","synthetic":false,"types":[]},{"text":"impl Clone for TrySelectError","synthetic":false,"types":[]},{"text":"impl Clone for SelectTimeoutError","synthetic":false,"types":[]},{"text":"impl Clone for TryReadyError","synthetic":false,"types":[]},{"text":"impl Clone for ReadyTimeoutError","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Select&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; Clone for Stealer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Steal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized + Pointable&gt; Clone for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Owned&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Pointable, '_&gt; Clone for Shared&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Collector","synthetic":false,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl Clone for PopError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for PushError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for CachePadded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Unparker","synthetic":false,"types":[]},{"text":"impl Clone for WaitGroup","synthetic":false,"types":[]}];
implementors["crypto"] = [{"text":"impl Clone for KeySize","synthetic":false,"types":[]},{"text":"impl Clone for AesSafe128Encryptor","synthetic":false,"types":[]},{"text":"impl Clone for AesSafe128Decryptor","synthetic":false,"types":[]},{"text":"impl Clone for AesSafe192Encryptor","synthetic":false,"types":[]},{"text":"impl Clone for AesSafe192Decryptor","synthetic":false,"types":[]},{"text":"impl Clone for AesSafe256Encryptor","synthetic":false,"types":[]},{"text":"impl Clone for AesSafe256Decryptor","synthetic":false,"types":[]},{"text":"impl Clone for AesSafe128EncryptorX8","synthetic":false,"types":[]},{"text":"impl Clone for AesSafe128DecryptorX8","synthetic":false,"types":[]},{"text":"impl Clone for AesSafe192EncryptorX8","synthetic":false,"types":[]},{"text":"impl Clone for AesSafe192DecryptorX8","synthetic":false,"types":[]},{"text":"impl Clone for AesSafe256EncryptorX8","synthetic":false,"types":[]},{"text":"impl Clone for AesSafe256DecryptorX8","synthetic":false,"types":[]},{"text":"impl Clone for Blake2b","synthetic":false,"types":[]},{"text":"impl Clone for Blake2s","synthetic":false,"types":[]},{"text":"impl Clone for NoPadding","synthetic":false,"types":[]},{"text":"impl Clone for PkcsPadding","synthetic":false,"types":[]},{"text":"impl Clone for Blowfish","synthetic":false,"types":[]},{"text":"impl Clone for BufferResult","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha20","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha20Poly1305","synthetic":false,"types":[]},{"text":"impl Clone for Fe","synthetic":false,"types":[]},{"text":"impl Clone for GeP2","synthetic":false,"types":[]},{"text":"impl Clone for GeP3","synthetic":false,"types":[]},{"text":"impl Clone for GeP1P1","synthetic":false,"types":[]},{"text":"impl Clone for GePrecomp","synthetic":false,"types":[]},{"text":"impl Clone for GeCached","synthetic":false,"types":[]},{"text":"impl Clone for Ghash","synthetic":false,"types":[]},{"text":"impl Clone for GhashWithC","synthetic":false,"types":[]},{"text":"impl Clone for Hc128","synthetic":false,"types":[]},{"text":"impl Clone for Md5","synthetic":false,"types":[]},{"text":"impl Clone for Poly1305","synthetic":false,"types":[]},{"text":"impl Clone for Rc4","synthetic":false,"types":[]},{"text":"impl Clone for Ripemd160","synthetic":false,"types":[]},{"text":"impl Clone for Salsa20","synthetic":false,"types":[]},{"text":"impl Clone for ScryptParams","synthetic":false,"types":[]},{"text":"impl Clone for Sha1","synthetic":false,"types":[]},{"text":"impl Clone for Sha512","synthetic":false,"types":[]},{"text":"impl Clone for Sha384","synthetic":false,"types":[]},{"text":"impl Clone for Sha512Trunc256","synthetic":false,"types":[]},{"text":"impl Clone for Sha512Trunc224","synthetic":false,"types":[]},{"text":"impl Clone for Sha256","synthetic":false,"types":[]},{"text":"impl Clone for Sha224","synthetic":false,"types":[]},{"text":"impl Clone for Sha3Mode","synthetic":false,"types":[]},{"text":"impl Clone for Sha3","synthetic":false,"types":[]},{"text":"impl Clone for Sosemanuk","synthetic":false,"types":[]},{"text":"impl Clone for SymmetricCipherError","synthetic":false,"types":[]},{"text":"impl Clone for Whirlpool","synthetic":false,"types":[]},{"text":"impl Clone for AesNiEncryptor","synthetic":false,"types":[]},{"text":"impl Clone for AesNiDecryptor","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["filetime"] = [{"text":"impl Clone for FileTime","synthetic":false,"types":[]}];
implementors["gnuplot"] = [{"text":"impl Clone for Coordinate","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for PlotOption&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for XAxis","synthetic":false,"types":[]},{"text":"impl Clone for YAxis","synthetic":false,"types":[]},{"text":"impl Clone for FillRegionType","synthetic":false,"types":[]},{"text":"impl Clone for AlignType","synthetic":false,"types":[]},{"text":"impl Clone for DashType","synthetic":false,"types":[]},{"text":"impl Clone for ArrowheadType","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for AutoOption&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for LabelOption&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TickOption&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for Tick&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for BorderLocation2D","synthetic":false,"types":[]},{"text":"impl Clone for MarginSide","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for LegendOption&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ContourStyle","synthetic":false,"types":[]},{"text":"impl Clone for PaletteType","synthetic":false,"types":[]},{"text":"impl Clone for GnuplotVersion","synthetic":false,"types":[]},{"text":"impl Clone for FillPatternType","synthetic":false,"types":[]},{"text":"impl Clone for MultiplotFillOrder","synthetic":false,"types":[]},{"text":"impl Clone for MultiplotFillDirection","synthetic":false,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for HashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Iter&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Keys&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Values&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for HashSet&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, '_&gt; Clone for Iter&lt;'_, K&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Intersection&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Difference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for SymmetricDifference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Union&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CollectionAllocErr","synthetic":false,"types":[]}];
implementors["libc"] = [{"text":"impl Clone for DIR","synthetic":false,"types":[]},{"text":"impl Clone for group","synthetic":false,"types":[]},{"text":"impl Clone for utimbuf","synthetic":false,"types":[]},{"text":"impl Clone for timeval","synthetic":false,"types":[]},{"text":"impl Clone for timespec","synthetic":false,"types":[]},{"text":"impl Clone for rlimit","synthetic":false,"types":[]},{"text":"impl Clone for rusage","synthetic":false,"types":[]},{"text":"impl Clone for ipv6_mreq","synthetic":false,"types":[]},{"text":"impl Clone for hostent","synthetic":false,"types":[]},{"text":"impl Clone for iovec","synthetic":false,"types":[]},{"text":"impl Clone for pollfd","synthetic":false,"types":[]},{"text":"impl Clone for winsize","synthetic":false,"types":[]},{"text":"impl Clone for linger","synthetic":false,"types":[]},{"text":"impl Clone for sigval","synthetic":false,"types":[]},{"text":"impl Clone for itimerval","synthetic":false,"types":[]},{"text":"impl Clone for tms","synthetic":false,"types":[]},{"text":"impl Clone for servent","synthetic":false,"types":[]},{"text":"impl Clone for protoent","synthetic":false,"types":[]},{"text":"impl Clone for FILE","synthetic":false,"types":[]},{"text":"impl Clone for fpos_t","synthetic":false,"types":[]},{"text":"impl Clone for timezone","synthetic":false,"types":[]},{"text":"impl Clone for in_addr","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreq","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreq_source","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in6","synthetic":false,"types":[]},{"text":"impl Clone for addrinfo","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_ll","synthetic":false,"types":[]},{"text":"impl Clone for fd_set","synthetic":false,"types":[]},{"text":"impl Clone for tm","synthetic":false,"types":[]},{"text":"impl Clone for sched_param","synthetic":false,"types":[]},{"text":"impl Clone for Dl_info","synthetic":false,"types":[]},{"text":"impl Clone for lconv","synthetic":false,"types":[]},{"text":"impl Clone for in_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for ifaddrs","synthetic":false,"types":[]},{"text":"impl Clone for in6_rtmsg","synthetic":false,"types":[]},{"text":"impl Clone for arpreq","synthetic":false,"types":[]},{"text":"impl Clone for arpreq_old","synthetic":false,"types":[]},{"text":"impl Clone for arphdr","synthetic":false,"types":[]},{"text":"impl Clone for mmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for epoll_event","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_un","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_storage","synthetic":false,"types":[]},{"text":"impl Clone for utsname","synthetic":false,"types":[]},{"text":"impl Clone for sigevent","synthetic":false,"types":[]},{"text":"impl Clone for fpos64_t","synthetic":false,"types":[]},{"text":"impl Clone for rlimit64","synthetic":false,"types":[]},{"text":"impl Clone for glob_t","synthetic":false,"types":[]},{"text":"impl Clone for passwd","synthetic":false,"types":[]},{"text":"impl Clone for spwd","synthetic":false,"types":[]},{"text":"impl Clone for dqblk","synthetic":false,"types":[]},{"text":"impl Clone for signalfd_siginfo","synthetic":false,"types":[]},{"text":"impl Clone for itimerspec","synthetic":false,"types":[]},{"text":"impl Clone for fsid_t","synthetic":false,"types":[]},{"text":"impl Clone for packet_mreq","synthetic":false,"types":[]},{"text":"impl Clone for cpu_set_t","synthetic":false,"types":[]},{"text":"impl Clone for if_nameindex","synthetic":false,"types":[]},{"text":"impl Clone for msginfo","synthetic":false,"types":[]},{"text":"impl Clone for sembuf","synthetic":false,"types":[]},{"text":"impl Clone for input_event","synthetic":false,"types":[]},{"text":"impl Clone for input_id","synthetic":false,"types":[]},{"text":"impl Clone for input_absinfo","synthetic":false,"types":[]},{"text":"impl Clone for input_keymap_entry","synthetic":false,"types":[]},{"text":"impl Clone for input_mask","synthetic":false,"types":[]},{"text":"impl Clone for ff_replay","synthetic":false,"types":[]},{"text":"impl Clone for ff_trigger","synthetic":false,"types":[]},{"text":"impl Clone for ff_envelope","synthetic":false,"types":[]},{"text":"impl Clone for ff_constant_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_ramp_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_condition_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_periodic_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_rumble_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_effect","synthetic":false,"types":[]},{"text":"impl Clone for dl_phdr_info","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Ehdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Ehdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Sym","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Sym","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Phdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Phdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Shdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Shdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Chdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Chdr","synthetic":false,"types":[]},{"text":"impl Clone for ucred","synthetic":false,"types":[]},{"text":"impl Clone for mntent","synthetic":false,"types":[]},{"text":"impl Clone for posix_spawn_file_actions_t","synthetic":false,"types":[]},{"text":"impl Clone for posix_spawnattr_t","synthetic":false,"types":[]},{"text":"impl Clone for genlmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for in6_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for arpd_request","synthetic":false,"types":[]},{"text":"impl Clone for inotify_event","synthetic":false,"types":[]},{"text":"impl Clone for fanotify_response","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_vm","synthetic":false,"types":[]},{"text":"impl Clone for regmatch_t","synthetic":false,"types":[]},{"text":"impl Clone for sock_extended_err","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_nl","synthetic":false,"types":[]},{"text":"impl Clone for dirent","synthetic":false,"types":[]},{"text":"impl Clone for dirent64","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_alg","synthetic":false,"types":[]},{"text":"impl Clone for af_alg_iv","synthetic":false,"types":[]},{"text":"impl Clone for mq_attr","synthetic":false,"types":[]},{"text":"impl Clone for statx","synthetic":false,"types":[]},{"text":"impl Clone for statx_timestamp","synthetic":false,"types":[]},{"text":"impl Clone for aiocb","synthetic":false,"types":[]},{"text":"impl Clone for __exit_status","synthetic":false,"types":[]},{"text":"impl Clone for __timeval","synthetic":false,"types":[]},{"text":"impl Clone for glob64_t","synthetic":false,"types":[]},{"text":"impl Clone for msghdr","synthetic":false,"types":[]},{"text":"impl Clone for cmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for termios","synthetic":false,"types":[]},{"text":"impl Clone for mallinfo","synthetic":false,"types":[]},{"text":"impl Clone for nlmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for nlmsgerr","synthetic":false,"types":[]},{"text":"impl Clone for nl_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for nl_mmap_req","synthetic":false,"types":[]},{"text":"impl Clone for nl_mmap_hdr","synthetic":false,"types":[]},{"text":"impl Clone for nlattr","synthetic":false,"types":[]},{"text":"impl Clone for rtentry","synthetic":false,"types":[]},{"text":"impl Clone for timex","synthetic":false,"types":[]},{"text":"impl Clone for ntptimeval","synthetic":false,"types":[]},{"text":"impl Clone for regex_t","synthetic":false,"types":[]},{"text":"impl Clone for utmpx","synthetic":false,"types":[]},{"text":"impl Clone for sigset_t","synthetic":false,"types":[]},{"text":"impl Clone for sysinfo","synthetic":false,"types":[]},{"text":"impl Clone for msqid_ds","synthetic":false,"types":[]},{"text":"impl Clone for sigaction","synthetic":false,"types":[]},{"text":"impl Clone for statfs","synthetic":false,"types":[]},{"text":"impl Clone for flock","synthetic":false,"types":[]},{"text":"impl Clone for flock64","synthetic":false,"types":[]},{"text":"impl Clone for siginfo_t","synthetic":false,"types":[]},{"text":"impl Clone for stack_t","synthetic":false,"types":[]},{"text":"impl Clone for stat","synthetic":false,"types":[]},{"text":"impl Clone for stat64","synthetic":false,"types":[]},{"text":"impl Clone for statfs64","synthetic":false,"types":[]},{"text":"impl Clone for statvfs64","synthetic":false,"types":[]},{"text":"impl Clone for pthread_attr_t","synthetic":false,"types":[]},{"text":"impl Clone for _libc_fpxreg","synthetic":false,"types":[]},{"text":"impl Clone for _libc_xmmreg","synthetic":false,"types":[]},{"text":"impl Clone for _libc_fpstate","synthetic":false,"types":[]},{"text":"impl Clone for user_regs_struct","synthetic":false,"types":[]},{"text":"impl Clone for user","synthetic":false,"types":[]},{"text":"impl Clone for mcontext_t","synthetic":false,"types":[]},{"text":"impl Clone for ipc_perm","synthetic":false,"types":[]},{"text":"impl Clone for shmid_ds","synthetic":false,"types":[]},{"text":"impl Clone for termios2","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreqn","synthetic":false,"types":[]},{"text":"impl Clone for user_fpregs_struct","synthetic":false,"types":[]},{"text":"impl Clone for ucontext_t","synthetic":false,"types":[]},{"text":"impl Clone for statvfs","synthetic":false,"types":[]},{"text":"impl Clone for max_align_t","synthetic":false,"types":[]},{"text":"impl Clone for sem_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutexattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlockattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_condattr_t","synthetic":false,"types":[]},{"text":"impl Clone for fanotify_event_metadata","synthetic":false,"types":[]},{"text":"impl Clone for pthread_cond_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutex_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlock_t","synthetic":false,"types":[]},{"text":"impl Clone for in6_addr","synthetic":false,"types":[]}];
implementors["libxml"] = [{"text":"impl Clone for __fsid_t","synthetic":false,"types":[]},{"text":"impl Clone for __mbstate_t","synthetic":false,"types":[]},{"text":"impl Clone for __mbstate_t__bindgen_ty_1","synthetic":false,"types":[]},{"text":"impl Clone for _G_fpos_t","synthetic":false,"types":[]},{"text":"impl Clone for _G_fpos64_t","synthetic":false,"types":[]},{"text":"impl Clone for _IO_jump_t","synthetic":false,"types":[]},{"text":"impl Clone for _IO_marker","synthetic":false,"types":[]},{"text":"impl Clone for _IO_FILE","synthetic":false,"types":[]},{"text":"impl Clone for _IO_FILE_plus","synthetic":false,"types":[]},{"text":"impl Clone for _xmlBuffer","synthetic":false,"types":[]},{"text":"impl Clone for _xmlBuf","synthetic":false,"types":[]},{"text":"impl Clone for _xmlNotation","synthetic":false,"types":[]},{"text":"impl Clone for _xmlEnumeration","synthetic":false,"types":[]},{"text":"impl Clone for _xmlAttribute","synthetic":false,"types":[]},{"text":"impl Clone for _xmlElementContent","synthetic":false,"types":[]},{"text":"impl Clone for _xmlRegexp","synthetic":false,"types":[]},{"text":"impl Clone for _xmlRegExecCtxt","synthetic":false,"types":[]},{"text":"impl Clone for _xmlDict","synthetic":false,"types":[]},{"text":"impl Clone for _xmlExpCtxt","synthetic":false,"types":[]},{"text":"impl Clone for _xmlExpNode","synthetic":false,"types":[]},{"text":"impl Clone for _xmlElement","synthetic":false,"types":[]},{"text":"impl Clone for _xmlNs","synthetic":false,"types":[]},{"text":"impl Clone for _xmlDtd","synthetic":false,"types":[]},{"text":"impl Clone for _xmlAttr","synthetic":false,"types":[]},{"text":"impl Clone for _xmlID","synthetic":false,"types":[]},{"text":"impl Clone for _xmlRef","synthetic":false,"types":[]},{"text":"impl Clone for _xmlNode","synthetic":false,"types":[]},{"text":"impl Clone for _xmlDoc","synthetic":false,"types":[]},{"text":"impl Clone for _xmlDOMWrapCtxt","synthetic":false,"types":[]},{"text":"impl Clone for _xmlHashTable","synthetic":false,"types":[]},{"text":"impl Clone for _xmlError","synthetic":false,"types":[]},{"text":"impl Clone for _xmlLink","synthetic":false,"types":[]},{"text":"impl Clone for _xmlList","synthetic":false,"types":[]},{"text":"impl Clone for _xmlAutomata","synthetic":false,"types":[]},{"text":"impl Clone for _xmlAutomataState","synthetic":false,"types":[]},{"text":"impl Clone for _xmlValidState","synthetic":false,"types":[]},{"text":"impl Clone for _xmlValidCtxt","synthetic":false,"types":[]},{"text":"impl Clone for _xmlEntity","synthetic":false,"types":[]},{"text":"impl Clone for _xmlParserInput","synthetic":false,"types":[]},{"text":"impl Clone for _xmlParserNodeInfo","synthetic":false,"types":[]},{"text":"impl Clone for _xmlParserNodeInfoSeq","synthetic":false,"types":[]},{"text":"impl Clone for _xmlParserCtxt","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSAXLocator","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSAXHandler","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSAXHandlerV1","synthetic":false,"types":[]},{"text":"impl Clone for max_align_t","synthetic":false,"types":[]},{"text":"impl Clone for UConverter","synthetic":false,"types":[]},{"text":"impl Clone for UConverterFromUnicodeArgs","synthetic":false,"types":[]},{"text":"impl Clone for UConverterToUnicodeArgs","synthetic":false,"types":[]},{"text":"impl Clone for UEnumeration","synthetic":false,"types":[]},{"text":"impl Clone for USet","synthetic":false,"types":[]},{"text":"impl Clone for _uconv_t","synthetic":false,"types":[]},{"text":"impl Clone for _xmlCharEncodingHandler","synthetic":false,"types":[]},{"text":"impl Clone for div_t","synthetic":false,"types":[]},{"text":"impl Clone for ldiv_t","synthetic":false,"types":[]},{"text":"impl Clone for lldiv_t","synthetic":false,"types":[]},{"text":"impl Clone for __sigset_t","synthetic":false,"types":[]},{"text":"impl Clone for timeval","synthetic":false,"types":[]},{"text":"impl Clone for timespec","synthetic":false,"types":[]},{"text":"impl Clone for fd_set","synthetic":false,"types":[]},{"text":"impl Clone for __pthread_rwlock_arch_t","synthetic":false,"types":[]},{"text":"impl Clone for __pthread_internal_list","synthetic":false,"types":[]},{"text":"impl Clone for __pthread_mutex_s","synthetic":false,"types":[]},{"text":"impl Clone for __pthread_cond_s","synthetic":false,"types":[]},{"text":"impl Clone for __pthread_cond_s__bindgen_ty_1","synthetic":false,"types":[]},{"text":"impl Clone for __pthread_cond_s__bindgen_ty_1__bindgen_ty_1","synthetic":false,"types":[]},{"text":"impl Clone for __pthread_cond_s__bindgen_ty_2","synthetic":false,"types":[]},{"text":"impl Clone for __pthread_cond_s__bindgen_ty_2__bindgen_ty_1","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutexattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_condattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_attr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutex_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_cond_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlock_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlockattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_barrier_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_barrierattr_t","synthetic":false,"types":[]},{"text":"impl Clone for random_data","synthetic":false,"types":[]},{"text":"impl Clone for drand48_data","synthetic":false,"types":[]},{"text":"impl Clone for _xlinkHandler","synthetic":false,"types":[]},{"text":"impl Clone for _xmlGlobalState","synthetic":false,"types":[]},{"text":"impl Clone for _xmlMutex","synthetic":false,"types":[]},{"text":"impl Clone for _xmlRMutex","synthetic":false,"types":[]},{"text":"impl Clone for _xmlParserInputBuffer","synthetic":false,"types":[]},{"text":"impl Clone for _xmlOutputBuffer","synthetic":false,"types":[]},{"text":"impl Clone for _htmlElemDesc","synthetic":false,"types":[]},{"text":"impl Clone for _htmlEntityDesc","synthetic":false,"types":[]},{"text":"impl Clone for _xmlChSRange","synthetic":false,"types":[]},{"text":"impl Clone for _xmlChLRange","synthetic":false,"types":[]},{"text":"impl Clone for _xmlChRangeGroup","synthetic":false,"types":[]},{"text":"impl Clone for _xmlNodeSet","synthetic":false,"types":[]},{"text":"impl Clone for _xmlXPathObject","synthetic":false,"types":[]},{"text":"impl Clone for _xmlXPathType","synthetic":false,"types":[]},{"text":"impl Clone for _xmlXPathVariable","synthetic":false,"types":[]},{"text":"impl Clone for _xmlXPathFunct","synthetic":false,"types":[]},{"text":"impl Clone for _xmlXPathAxis","synthetic":false,"types":[]},{"text":"impl Clone for _xmlXPathContext","synthetic":false,"types":[]},{"text":"impl Clone for _xmlXPathCompExpr","synthetic":false,"types":[]},{"text":"impl Clone for _xmlXPathParserContext","synthetic":false,"types":[]},{"text":"impl Clone for _xmlCatalog","synthetic":false,"types":[]},{"text":"impl Clone for _xmlShellCtxt","synthetic":false,"types":[]},{"text":"impl Clone for _xmlPattern","synthetic":false,"types":[]},{"text":"impl Clone for _xmlStreamCtxt","synthetic":false,"types":[]},{"text":"impl Clone for _xmlRelaxNG","synthetic":false,"types":[]},{"text":"impl Clone for _xmlRelaxNGParserCtxt","synthetic":false,"types":[]},{"text":"impl Clone for _xmlRelaxNGValidCtxt","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSchemaVal","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSchemaAnnot","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSchemaAttribute","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSchemaAttributeLink","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSchemaWildcardNs","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSchemaWildcard","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSchemaAttributeGroup","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSchemaTypeLink","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSchemaFacetLink","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSchemaType","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSchemaElement","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSchemaFacet","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSchemaNotation","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSchema","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSchematron","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSchematronParserCtxt","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSchematronValidCtxt","synthetic":false,"types":[]},{"text":"impl Clone for _xmlURI","synthetic":false,"types":[]},{"text":"impl Clone for _xmlXIncludeCtxt","synthetic":false,"types":[]},{"text":"impl Clone for _xmlModule","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSchemaParserCtxt","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSchemaValidCtxt","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSchemaSAXPlug","synthetic":false,"types":[]},{"text":"impl Clone for _xmlTextReader","synthetic":false,"types":[]},{"text":"impl Clone for _xmlSaveCtxt","synthetic":false,"types":[]},{"text":"impl Clone for _xmlTextWriter","synthetic":false,"types":[]},{"text":"impl Clone for _xmlLocationSet","synthetic":false,"types":[]},{"text":"impl Clone for __va_list_tag","synthetic":false,"types":[]},{"text":"impl Clone for SaveOptions","synthetic":false,"types":[]},{"text":"impl Clone for Document","synthetic":false,"types":[]},{"text":"impl Clone for Namespace","synthetic":false,"types":[]},{"text":"impl Clone for Node","synthetic":false,"types":[]},{"text":"impl Clone for Context","synthetic":false,"types":[]},{"text":"impl Clone for RoNode","synthetic":false,"types":[]}];
implementors["llamapun"] = [{"text":"impl Clone for StructuralEnv","synthetic":false,"types":[]},{"text":"impl Clone for AmsEnv","synthetic":false,"types":[]},{"text":"impl Clone for SpecialTagsOption","synthetic":false,"types":[]},{"text":"impl Clone for DNMParameters","synthetic":false,"types":[]},{"text":"impl&lt;'dnmrange&gt; Clone for DNMRange&lt;'dnmrange&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Clone for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl Clone for PatternMarker","synthetic":false,"types":[]},{"text":"impl Clone for MathMarker","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Clone for TextMarker&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Clone for MarkerEnum&lt;'t&gt;","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl&lt;X:&nbsp;Clone&gt; Clone for Range&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Gamma","synthetic":false,"types":[]},{"text":"impl Clone for ChiSquared","synthetic":false,"types":[]},{"text":"impl Clone for FisherF","synthetic":false,"types":[]},{"text":"impl Clone for StudentT","synthetic":false,"types":[]},{"text":"impl Clone for StandardNormal","synthetic":false,"types":[]},{"text":"impl Clone for Normal","synthetic":false,"types":[]},{"text":"impl Clone for LogNormal","synthetic":false,"types":[]},{"text":"impl Clone for Exp1","synthetic":false,"types":[]},{"text":"impl Clone for Exp","synthetic":false,"types":[]},{"text":"impl&lt;Sup&gt; Clone for RandSample&lt;Sup&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Weighted&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for TimerError","synthetic":false,"types":[]},{"text":"impl Clone for ReseedWithDefault","synthetic":false,"types":[]},{"text":"impl Clone for ChaChaRng","synthetic":false,"types":[]},{"text":"impl Clone for IsaacRng","synthetic":false,"types":[]},{"text":"impl Clone for Isaac64Rng","synthetic":false,"types":[]},{"text":"impl Clone for XorShiftRng","synthetic":false,"types":[]},{"text":"impl Clone for StdRng","synthetic":false,"types":[]},{"text":"impl Clone for ThreadRng","synthetic":false,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T:&nbsp;Clone + Ord + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Ord + Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Ord + Sync, V:&nbsp;Sync&gt; Clone for Iter&lt;'a, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Ord + Sync + 'a&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Hash + Eq + Sync, V:&nbsp;Sync&gt; Clone for Iter&lt;'a, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Hash + Eq + Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: ParallelIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: ParallelIterator&lt;Item = A::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: IndexedParallelIterator,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for Cloned&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for Copied&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Clone for Empty&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator&gt; Clone for Enumerate&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, P:&nbsp;Clone&gt; Clone for Filter&lt;I, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, P:&nbsp;Clone&gt; Clone for FilterMap&lt;I, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, F:&nbsp;Clone&gt; Clone for FlatMap&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, F:&nbsp;Clone&gt; Clone for FlatMapIter&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for Flatten&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for FlattenIter&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, ID:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Fold&lt;I, ID, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, U:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for FoldWith&lt;I, U, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, F:&nbsp;Clone&gt; Clone for Inspect&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: IndexedParallelIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: IndexedParallelIterator&lt;Item = I::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: IndexedParallelIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: IndexedParallelIterator&lt;Item = I::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: ParallelIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator&gt; Clone for MinLen&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator&gt; Clone for MaxLen&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, F:&nbsp;Clone&gt; Clone for Map&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, T:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for MapWith&lt;I, T, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, INIT:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for MapInit&lt;I, INIT, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for MultiZip&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for Once&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for PanicFuse&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Iter:&nbsp;Clone&gt; Clone for IterBridge&lt;Iter&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator, P:&nbsp;Clone&gt; Clone for Positions&lt;I, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for Repeat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for RepeatN&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator&gt; Clone for Rev&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Skip&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for Split&lt;D, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Take&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, U:&nbsp;Clone, ID:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for TryFold&lt;I, U, ID, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, U:&nbsp;Clone + Try, F:&nbsp;Clone&gt; Clone for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U::Ok: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, F:&nbsp;Clone&gt; Clone for Update&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for WhileSome&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone + IndexedParallelIterator, B:&nbsp;Clone + IndexedParallelIterator&gt; Clone for Zip&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone + IndexedParallelIterator, B:&nbsp;Clone + IndexedParallelIterator&gt; Clone for ZipEq&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator&gt; Clone for StepBy&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Iter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Iter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Sync&gt; Clone for Iter&lt;'data, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Sync&gt; Clone for Chunks&lt;'data, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Sync&gt; Clone for ChunksExact&lt;'data, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Sync&gt; Clone for Windows&lt;'data, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T, P:&nbsp;Clone&gt; Clone for Split&lt;'data, T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for Chars&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for CharIndices&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for Bytes&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for EncodeUtf16&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch, P:&nbsp;Clone + Pattern&gt; Clone for Split&lt;'ch, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch, P:&nbsp;Clone + Pattern&gt; Clone for SplitTerminator&lt;'ch, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for Lines&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for SplitWhitespace&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch, P:&nbsp;Clone + Pattern&gt; Clone for Matches&lt;'ch, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch, P:&nbsp;Clone + Pattern&gt; Clone for MatchIndices&lt;'ch, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Clone for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Regex","synthetic":false,"types":[]},{"text":"impl Clone for CaptureLocations","synthetic":false,"types":[]},{"text":"impl&lt;'c, 't: 'c&gt; Clone for SubCaptureMatches&lt;'c, 't&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RegexSet","synthetic":false,"types":[]},{"text":"impl Clone for SetMatches","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SetMatchesIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RegexSet","synthetic":false,"types":[]},{"text":"impl Clone for SetMatches","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SetMatchesIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Clone for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Regex","synthetic":false,"types":[]},{"text":"impl Clone for CaptureLocations","synthetic":false,"types":[]},{"text":"impl&lt;'c, 't: 'c&gt; Clone for SubCaptureMatches&lt;'c, 't&gt;","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Clone for ParserBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Parser","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for Span","synthetic":false,"types":[]},{"text":"impl Clone for Position","synthetic":false,"types":[]},{"text":"impl Clone for WithComments","synthetic":false,"types":[]},{"text":"impl Clone for Comment","synthetic":false,"types":[]},{"text":"impl Clone for Ast","synthetic":false,"types":[]},{"text":"impl Clone for Alternation","synthetic":false,"types":[]},{"text":"impl Clone for Concat","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for LiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for SpecialLiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for HexLiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for Class","synthetic":false,"types":[]},{"text":"impl Clone for ClassPerl","synthetic":false,"types":[]},{"text":"impl Clone for ClassPerlKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassAscii","synthetic":false,"types":[]},{"text":"impl Clone for ClassAsciiKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicode","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeOpKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassBracketed","synthetic":false,"types":[]},{"text":"impl Clone for ClassSet","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetItem","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetRange","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetUnion","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetBinaryOp","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetBinaryOpKind","synthetic":false,"types":[]},{"text":"impl Clone for Assertion","synthetic":false,"types":[]},{"text":"impl Clone for AssertionKind","synthetic":false,"types":[]},{"text":"impl Clone for Repetition","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionOp","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionKind","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionRange","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for GroupKind","synthetic":false,"types":[]},{"text":"impl Clone for CaptureName","synthetic":false,"types":[]},{"text":"impl Clone for SetFlags","synthetic":false,"types":[]},{"text":"impl Clone for Flags","synthetic":false,"types":[]},{"text":"impl Clone for FlagsItem","synthetic":false,"types":[]},{"text":"impl Clone for FlagsItemKind","synthetic":false,"types":[]},{"text":"impl Clone for Flag","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Literals","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for TranslatorBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Translator","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for Hir","synthetic":false,"types":[]},{"text":"impl Clone for HirKind","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for Class","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicode","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Clone for ClassBytes","synthetic":false,"types":[]},{"text":"impl Clone for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Clone for Anchor","synthetic":false,"types":[]},{"text":"impl Clone for WordBoundary","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for GroupKind","synthetic":false,"types":[]},{"text":"impl Clone for Repetition","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionKind","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionRange","synthetic":false,"types":[]},{"text":"impl Clone for ParserBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Parser","synthetic":false,"types":[]},{"text":"impl Clone for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Clone for Utf8Range","synthetic":false,"types":[]}];
implementors["rustc_serialize"] = [{"text":"impl Clone for CharacterSet","synthetic":false,"types":[]},{"text":"impl Clone for Newline","synthetic":false,"types":[]},{"text":"impl Clone for Config","synthetic":false,"types":[]},{"text":"impl Clone for FromBase64Error","synthetic":false,"types":[]},{"text":"impl Clone for FromHexError","synthetic":false,"types":[]},{"text":"impl Clone for Json","synthetic":false,"types":[]},{"text":"impl Clone for ErrorCode","synthetic":false,"types":[]},{"text":"impl Clone for EncoderError","synthetic":false,"types":[]},{"text":"impl&lt;'l&gt; Clone for StackElement&lt;'l&gt;","synthetic":false,"types":[]}];
implementors["senna"] = [{"text":"impl Clone for SennaParseOptions","synthetic":false,"types":[]},{"text":"impl Clone for PSGPhrase","synthetic":false,"types":[]},{"text":"impl Clone for PSGNode","synthetic":false,"types":[]},{"text":"impl Clone for POS","synthetic":false,"types":[]},{"text":"impl Clone for Phrase","synthetic":false,"types":[]}];
implementors["tar"] = [{"text":"impl Clone for EntryType","synthetic":false,"types":[]},{"text":"impl Clone for HeaderMode","synthetic":false,"types":[]},{"text":"impl Clone for Header","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Clone for Duration","synthetic":false,"types":[]},{"text":"impl Clone for OutOfRangeError","synthetic":false,"types":[]},{"text":"impl Clone for Timespec","synthetic":false,"types":[]},{"text":"impl Clone for PreciseTime","synthetic":false,"types":[]},{"text":"impl Clone for SteadyTime","synthetic":false,"types":[]},{"text":"impl Clone for Tm","synthetic":false,"types":[]},{"text":"impl Clone for ParseError","synthetic":false,"types":[]}];
implementors["walkdir"] = [{"text":"impl Clone for DirEntry","synthetic":false,"types":[]}];
implementors["whatlang"] = [{"text":"impl Clone for Detector","synthetic":false,"types":[]},{"text":"impl Clone for Info","synthetic":false,"types":[]},{"text":"impl Clone for Lang","synthetic":false,"types":[]},{"text":"impl Clone for Options","synthetic":false,"types":[]},{"text":"impl Clone for Script","synthetic":false,"types":[]}];
implementors["xattr"] = [{"text":"impl Clone for UnsupportedPlatformError","synthetic":false,"types":[]},{"text":"impl Clone for XAttrs","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()