(function() {var implementors = {};
implementors["ahash"] = [{"text":"impl Send for AHasher","synthetic":true,"types":[]},{"text":"impl Send for RandomState","synthetic":true,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; Send for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Send for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Send for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; Send for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Match","synthetic":true,"types":[]},{"text":"impl Send for MatchKind","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; Send for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl Send for Searcher","synthetic":true,"types":[]},{"text":"impl Send for MatchKind","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Send for BigEndian","synthetic":true,"types":[]},{"text":"impl Send for LittleEndian","synthetic":true,"types":[]}];
implementors["circular_queue"] = [{"text":"impl&lt;T&gt; Send for CircularQueue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for TryIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for TryReadyError","synthetic":true,"types":[]},{"text":"impl Send for TrySelectError","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Send for Select&lt;'_&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; Send for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Worker&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Stealer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Injector&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T, P&gt; !Send for CompareAndSetError&lt;'g, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; !Send for Shared&lt;'g, T&gt;","synthetic":true,"types":[]},{"text":"impl !Send for LocalHandle","synthetic":true,"types":[]},{"text":"impl !Send for Guard","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Pointable + Send + Sync&gt; Send for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for Collector","synthetic":false,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl Send for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for ArrayQueue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for SegQueue&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl Send for Backoff","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; Send for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; Send for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for CachePadded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for Parker","synthetic":false,"types":[]},{"text":"impl Send for Unparker","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for ShardedLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, '_&gt; Send for ScopedJoinHandle&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["crypto"] = [{"text":"impl Send for KeySize","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for AesGcm&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for AesSafe128Encryptor","synthetic":true,"types":[]},{"text":"impl Send for AesSafe128Decryptor","synthetic":true,"types":[]},{"text":"impl Send for AesSafe192Encryptor","synthetic":true,"types":[]},{"text":"impl Send for AesSafe192Decryptor","synthetic":true,"types":[]},{"text":"impl Send for AesSafe256Encryptor","synthetic":true,"types":[]},{"text":"impl Send for AesSafe256Decryptor","synthetic":true,"types":[]},{"text":"impl Send for AesSafe128EncryptorX8","synthetic":true,"types":[]},{"text":"impl Send for AesSafe128DecryptorX8","synthetic":true,"types":[]},{"text":"impl Send for AesSafe192EncryptorX8","synthetic":true,"types":[]},{"text":"impl Send for AesSafe192DecryptorX8","synthetic":true,"types":[]},{"text":"impl Send for AesSafe256EncryptorX8","synthetic":true,"types":[]},{"text":"impl Send for AesSafe256DecryptorX8","synthetic":true,"types":[]},{"text":"impl Send for Blake2b","synthetic":true,"types":[]},{"text":"impl Send for Blake2s","synthetic":true,"types":[]},{"text":"impl Send for NoPadding","synthetic":true,"types":[]},{"text":"impl Send for PkcsPadding","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for EncPadding&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for DecPadding&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, X&gt; Send for EcbEncryptor&lt;T, X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, X&gt; Send for EcbDecryptor&lt;T, X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, X&gt; Send for CbcEncryptor&lt;T, X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, X&gt; Send for CbcDecryptor&lt;T, X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for CtrMode&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for CtrModeX8&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Blowfish","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RefReadBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for OwnedReadBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RefWriteBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BorrowedWriteBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for OwnedWriteBuffer","synthetic":true,"types":[]},{"text":"impl Send for BufferResult","synthetic":true,"types":[]},{"text":"impl Send for ChaCha20","synthetic":true,"types":[]},{"text":"impl Send for ChaCha20Poly1305","synthetic":true,"types":[]},{"text":"impl Send for Fe","synthetic":true,"types":[]},{"text":"impl Send for GeP2","synthetic":true,"types":[]},{"text":"impl Send for GeP3","synthetic":true,"types":[]},{"text":"impl Send for GeP1P1","synthetic":true,"types":[]},{"text":"impl Send for GePrecomp","synthetic":true,"types":[]},{"text":"impl Send for GeCached","synthetic":true,"types":[]},{"text":"impl Send for Fortuna","synthetic":true,"types":[]},{"text":"impl Send for Ghash","synthetic":true,"types":[]},{"text":"impl Send for GhashWithC","synthetic":true,"types":[]},{"text":"impl Send for Hc128","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for MacResult","synthetic":true,"types":[]},{"text":"impl Send for Md5","synthetic":true,"types":[]},{"text":"impl Send for Poly1305","synthetic":true,"types":[]},{"text":"impl Send for Rc4","synthetic":true,"types":[]},{"text":"impl Send for Ripemd160","synthetic":true,"types":[]},{"text":"impl Send for Salsa20","synthetic":true,"types":[]},{"text":"impl Send for ScryptParams","synthetic":true,"types":[]},{"text":"impl Send for Sha1","synthetic":true,"types":[]},{"text":"impl Send for Sha512","synthetic":true,"types":[]},{"text":"impl Send for Sha384","synthetic":true,"types":[]},{"text":"impl Send for Sha512Trunc256","synthetic":true,"types":[]},{"text":"impl Send for Sha512Trunc224","synthetic":true,"types":[]},{"text":"impl Send for Sha256","synthetic":true,"types":[]},{"text":"impl Send for Sha224","synthetic":true,"types":[]},{"text":"impl Send for Sha3","synthetic":true,"types":[]},{"text":"impl Send for Sha3Mode","synthetic":true,"types":[]},{"text":"impl Send for Sosemanuk","synthetic":true,"types":[]},{"text":"impl Send for SymmetricCipherError","synthetic":true,"types":[]},{"text":"impl Send for Whirlpool","synthetic":true,"types":[]},{"text":"impl Send for AesNiEncryptor","synthetic":true,"types":[]},{"text":"impl Send for AesNiDecryptor","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Send for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["filetime"] = [{"text":"impl Send for FileTime","synthetic":true,"types":[]}];
implementors["gnuplot"] = [{"text":"impl Send for Axes2D","synthetic":true,"types":[]},{"text":"impl Send for Axes3D","synthetic":true,"types":[]},{"text":"impl !Send for GnuplotInitError","synthetic":true,"types":[]},{"text":"impl Send for CloseSentinel","synthetic":true,"types":[]},{"text":"impl Send for Figure","synthetic":true,"types":[]},{"text":"impl Send for GnuplotVersion","synthetic":true,"types":[]},{"text":"impl Send for Coordinate","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for PlotOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for XAxis","synthetic":true,"types":[]},{"text":"impl Send for YAxis","synthetic":true,"types":[]},{"text":"impl Send for FillRegionType","synthetic":true,"types":[]},{"text":"impl Send for AlignType","synthetic":true,"types":[]},{"text":"impl Send for DashType","synthetic":true,"types":[]},{"text":"impl Send for ArrowheadType","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AutoOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LabelOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TickOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for Tick&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BorderLocation2D","synthetic":true,"types":[]},{"text":"impl Send for MarginSide","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LegendOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ContourStyle","synthetic":true,"types":[]},{"text":"impl Send for PaletteType","synthetic":true,"types":[]},{"text":"impl Send for FillPatternType","synthetic":true,"types":[]},{"text":"impl Send for MultiplotFillOrder","synthetic":true,"types":[]},{"text":"impl Send for MultiplotFillDirection","synthetic":true,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;K, V, S&gt; Send for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CollectionAllocErr","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, F&gt; Send for DrainFilter&lt;'a, K, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawEntryBuilderMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawVacantEntryMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawEntryBuilder&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawEntryMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Send for Iter&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for IntoIter&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Send for Drain&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for SymmetricDifference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K:&nbsp;Send, V:&nbsp;Send, '_&gt; Send for IterMut&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Send for RawOccupiedEntryMut&lt;'_, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V, S, '_&gt; Send for OccupiedEntry&lt;'_, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["jwalk"] = [{"text":"impl Send for DirEntry","synthetic":true,"types":[]},{"text":"impl Send for DirEntryIter","synthetic":true,"types":[]},{"text":"impl Send for ReadDirSpec","synthetic":true,"types":[]},{"text":"impl Send for WalkDir","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl !Send for group","synthetic":true,"types":[]},{"text":"impl Send for utimbuf","synthetic":true,"types":[]},{"text":"impl Send for timeval","synthetic":true,"types":[]},{"text":"impl Send for timespec","synthetic":true,"types":[]},{"text":"impl Send for rlimit","synthetic":true,"types":[]},{"text":"impl Send for rusage","synthetic":true,"types":[]},{"text":"impl Send for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl !Send for hostent","synthetic":true,"types":[]},{"text":"impl !Send for iovec","synthetic":true,"types":[]},{"text":"impl Send for pollfd","synthetic":true,"types":[]},{"text":"impl Send for winsize","synthetic":true,"types":[]},{"text":"impl Send for linger","synthetic":true,"types":[]},{"text":"impl !Send for sigval","synthetic":true,"types":[]},{"text":"impl Send for itimerval","synthetic":true,"types":[]},{"text":"impl Send for tms","synthetic":true,"types":[]},{"text":"impl !Send for servent","synthetic":true,"types":[]},{"text":"impl !Send for protoent","synthetic":true,"types":[]},{"text":"impl Send for in_addr","synthetic":true,"types":[]},{"text":"impl Send for ip_mreq","synthetic":true,"types":[]},{"text":"impl Send for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Send for sockaddr","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl !Send for addrinfo","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Send for fd_set","synthetic":true,"types":[]},{"text":"impl !Send for tm","synthetic":true,"types":[]},{"text":"impl Send for sched_param","synthetic":true,"types":[]},{"text":"impl !Send for Dl_info","synthetic":true,"types":[]},{"text":"impl !Send for lconv","synthetic":true,"types":[]},{"text":"impl Send for in_pktinfo","synthetic":true,"types":[]},{"text":"impl !Send for ifaddrs","synthetic":true,"types":[]},{"text":"impl Send for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Send for arpreq","synthetic":true,"types":[]},{"text":"impl Send for arpreq_old","synthetic":true,"types":[]},{"text":"impl Send for arphdr","synthetic":true,"types":[]},{"text":"impl !Send for mmsghdr","synthetic":true,"types":[]},{"text":"impl Send for epoll_event","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Send for utsname","synthetic":true,"types":[]},{"text":"impl !Send for sigevent","synthetic":true,"types":[]},{"text":"impl Send for rlimit64","synthetic":true,"types":[]},{"text":"impl !Send for glob_t","synthetic":true,"types":[]},{"text":"impl !Send for passwd","synthetic":true,"types":[]},{"text":"impl !Send for spwd","synthetic":true,"types":[]},{"text":"impl Send for dqblk","synthetic":true,"types":[]},{"text":"impl Send for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Send for itimerspec","synthetic":true,"types":[]},{"text":"impl Send for fsid_t","synthetic":true,"types":[]},{"text":"impl Send for packet_mreq","synthetic":true,"types":[]},{"text":"impl Send for cpu_set_t","synthetic":true,"types":[]},{"text":"impl !Send for if_nameindex","synthetic":true,"types":[]},{"text":"impl Send for msginfo","synthetic":true,"types":[]},{"text":"impl Send for sembuf","synthetic":true,"types":[]},{"text":"impl Send for input_event","synthetic":true,"types":[]},{"text":"impl Send for input_id","synthetic":true,"types":[]},{"text":"impl Send for input_absinfo","synthetic":true,"types":[]},{"text":"impl Send for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Send for input_mask","synthetic":true,"types":[]},{"text":"impl Send for ff_replay","synthetic":true,"types":[]},{"text":"impl Send for ff_trigger","synthetic":true,"types":[]},{"text":"impl Send for ff_envelope","synthetic":true,"types":[]},{"text":"impl Send for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl !Send for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_effect","synthetic":true,"types":[]},{"text":"impl !Send for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Send for ucred","synthetic":true,"types":[]},{"text":"impl !Send for mntent","synthetic":true,"types":[]},{"text":"impl !Send for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Send for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Send for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Send for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for arpd_request","synthetic":true,"types":[]},{"text":"impl Send for inotify_event","synthetic":true,"types":[]},{"text":"impl Send for fanotify_response","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Send for regmatch_t","synthetic":true,"types":[]},{"text":"impl Send for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Send for dirent","synthetic":true,"types":[]},{"text":"impl Send for dirent64","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Send for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Send for mq_attr","synthetic":true,"types":[]},{"text":"impl Send for statx","synthetic":true,"types":[]},{"text":"impl Send for statx_timestamp","synthetic":true,"types":[]},{"text":"impl !Send for aiocb","synthetic":true,"types":[]},{"text":"impl Send for __exit_status","synthetic":true,"types":[]},{"text":"impl Send for __timeval","synthetic":true,"types":[]},{"text":"impl !Send for glob64_t","synthetic":true,"types":[]},{"text":"impl !Send for msghdr","synthetic":true,"types":[]},{"text":"impl Send for cmsghdr","synthetic":true,"types":[]},{"text":"impl Send for termios","synthetic":true,"types":[]},{"text":"impl Send for mallinfo","synthetic":true,"types":[]},{"text":"impl Send for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Send for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Send for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Send for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Send for nlattr","synthetic":true,"types":[]},{"text":"impl !Send for rtentry","synthetic":true,"types":[]},{"text":"impl Send for timex","synthetic":true,"types":[]},{"text":"impl Send for ntptimeval","synthetic":true,"types":[]},{"text":"impl !Send for regex_t","synthetic":true,"types":[]},{"text":"impl Send for utmpx","synthetic":true,"types":[]},{"text":"impl Send for sigset_t","synthetic":true,"types":[]},{"text":"impl Send for sysinfo","synthetic":true,"types":[]},{"text":"impl Send for msqid_ds","synthetic":true,"types":[]},{"text":"impl Send for sigaction","synthetic":true,"types":[]},{"text":"impl Send for statfs","synthetic":true,"types":[]},{"text":"impl Send for flock","synthetic":true,"types":[]},{"text":"impl Send for flock64","synthetic":true,"types":[]},{"text":"impl Send for siginfo_t","synthetic":true,"types":[]},{"text":"impl !Send for stack_t","synthetic":true,"types":[]},{"text":"impl Send for stat","synthetic":true,"types":[]},{"text":"impl Send for stat64","synthetic":true,"types":[]},{"text":"impl Send for statfs64","synthetic":true,"types":[]},{"text":"impl Send for statvfs64","synthetic":true,"types":[]},{"text":"impl Send for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Send for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Send for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Send for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Send for user_regs_struct","synthetic":true,"types":[]},{"text":"impl !Send for user","synthetic":true,"types":[]},{"text":"impl !Send for mcontext_t","synthetic":true,"types":[]},{"text":"impl Send for ipc_perm","synthetic":true,"types":[]},{"text":"impl Send for shmid_ds","synthetic":true,"types":[]},{"text":"impl Send for termios2","synthetic":true,"types":[]},{"text":"impl Send for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Send for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl !Send for ucontext_t","synthetic":true,"types":[]},{"text":"impl Send for statvfs","synthetic":true,"types":[]},{"text":"impl Send for max_align_t","synthetic":true,"types":[]},{"text":"impl Send for sem_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Send for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Send for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Send for in6_addr","synthetic":true,"types":[]},{"text":"impl Send for DIR","synthetic":true,"types":[]},{"text":"impl Send for FILE","synthetic":true,"types":[]},{"text":"impl Send for fpos_t","synthetic":true,"types":[]},{"text":"impl Send for timezone","synthetic":true,"types":[]},{"text":"impl Send for fpos64_t","synthetic":true,"types":[]}];
implementors["libxml"] = [{"text":"impl Send for __fsid_t","synthetic":true,"types":[]},{"text":"impl Send for __mbstate_t","synthetic":true,"types":[]},{"text":"impl Send for _G_fpos_t","synthetic":true,"types":[]},{"text":"impl Send for _G_fpos64_t","synthetic":true,"types":[]},{"text":"impl Send for _IO_jump_t","synthetic":true,"types":[]},{"text":"impl !Send for _IO_marker","synthetic":true,"types":[]},{"text":"impl !Send for _IO_FILE","synthetic":true,"types":[]},{"text":"impl Send for _IO_FILE_plus","synthetic":true,"types":[]},{"text":"impl !Send for _xmlBuffer","synthetic":true,"types":[]},{"text":"impl Send for _xmlBuf","synthetic":true,"types":[]},{"text":"impl !Send for _xmlNotation","synthetic":true,"types":[]},{"text":"impl !Send for _xmlEnumeration","synthetic":true,"types":[]},{"text":"impl !Send for _xmlAttribute","synthetic":true,"types":[]},{"text":"impl !Send for _xmlElementContent","synthetic":true,"types":[]},{"text":"impl Send for _xmlRegexp","synthetic":true,"types":[]},{"text":"impl Send for _xmlRegExecCtxt","synthetic":true,"types":[]},{"text":"impl Send for _xmlDict","synthetic":true,"types":[]},{"text":"impl Send for _xmlExpCtxt","synthetic":true,"types":[]},{"text":"impl Send for _xmlExpNode","synthetic":true,"types":[]},{"text":"impl !Send for _xmlElement","synthetic":true,"types":[]},{"text":"impl !Send for _xmlNs","synthetic":true,"types":[]},{"text":"impl !Send for _xmlDtd","synthetic":true,"types":[]},{"text":"impl !Send for _xmlAttr","synthetic":true,"types":[]},{"text":"impl !Send for _xmlID","synthetic":true,"types":[]},{"text":"impl !Send for _xmlRef","synthetic":true,"types":[]},{"text":"impl !Send for _xmlNode","synthetic":true,"types":[]},{"text":"impl !Send for _xmlDoc","synthetic":true,"types":[]},{"text":"impl !Send for _xmlDOMWrapCtxt","synthetic":true,"types":[]},{"text":"impl Send for _xmlHashTable","synthetic":true,"types":[]},{"text":"impl !Send for _xmlError","synthetic":true,"types":[]},{"text":"impl Send for _xmlLink","synthetic":true,"types":[]},{"text":"impl Send for _xmlList","synthetic":true,"types":[]},{"text":"impl Send for _xmlAutomata","synthetic":true,"types":[]},{"text":"impl Send for _xmlAutomataState","synthetic":true,"types":[]},{"text":"impl Send for _xmlValidState","synthetic":true,"types":[]},{"text":"impl !Send for _xmlValidCtxt","synthetic":true,"types":[]},{"text":"impl !Send for _xmlEntity","synthetic":true,"types":[]},{"text":"impl !Send for _xmlParserInput","synthetic":true,"types":[]},{"text":"impl !Send for _xmlParserNodeInfo","synthetic":true,"types":[]},{"text":"impl !Send for _xmlParserNodeInfoSeq","synthetic":true,"types":[]},{"text":"impl !Send for _xmlParserCtxt","synthetic":true,"types":[]},{"text":"impl Send for _xmlSAXLocator","synthetic":true,"types":[]},{"text":"impl !Send for _xmlSAXHandler","synthetic":true,"types":[]},{"text":"impl Send for _xmlSAXHandlerV1","synthetic":true,"types":[]},{"text":"impl Send for max_align_t","synthetic":true,"types":[]},{"text":"impl Send for UConverter","synthetic":true,"types":[]},{"text":"impl !Send for UConverterFromUnicodeArgs","synthetic":true,"types":[]},{"text":"impl !Send for UConverterToUnicodeArgs","synthetic":true,"types":[]},{"text":"impl Send for UEnumeration","synthetic":true,"types":[]},{"text":"impl Send for USet","synthetic":true,"types":[]},{"text":"impl !Send for _uconv_t","synthetic":true,"types":[]},{"text":"impl !Send for _xmlCharEncodingHandler","synthetic":true,"types":[]},{"text":"impl Send for div_t","synthetic":true,"types":[]},{"text":"impl Send for ldiv_t","synthetic":true,"types":[]},{"text":"impl Send for lldiv_t","synthetic":true,"types":[]},{"text":"impl Send for __sigset_t","synthetic":true,"types":[]},{"text":"impl Send for timeval","synthetic":true,"types":[]},{"text":"impl Send for timespec","synthetic":true,"types":[]},{"text":"impl Send for fd_set","synthetic":true,"types":[]},{"text":"impl Send for __pthread_rwlock_arch_t","synthetic":true,"types":[]},{"text":"impl !Send for __pthread_internal_list","synthetic":true,"types":[]},{"text":"impl !Send for __pthread_mutex_s","synthetic":true,"types":[]},{"text":"impl Send for __pthread_cond_s","synthetic":true,"types":[]},{"text":"impl Send for __pthread_cond_s__bindgen_ty_1__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl Send for __pthread_cond_s__bindgen_ty_2__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl !Send for random_data","synthetic":true,"types":[]},{"text":"impl Send for drand48_data","synthetic":true,"types":[]},{"text":"impl Send for _xlinkHandler","synthetic":true,"types":[]},{"text":"impl !Send for _xmlGlobalState","synthetic":true,"types":[]},{"text":"impl Send for _xmlMutex","synthetic":true,"types":[]},{"text":"impl Send for _xmlRMutex","synthetic":true,"types":[]},{"text":"impl !Send for _xmlParserInputBuffer","synthetic":true,"types":[]},{"text":"impl !Send for _xmlOutputBuffer","synthetic":true,"types":[]},{"text":"impl !Send for _htmlElemDesc","synthetic":true,"types":[]},{"text":"impl !Send for _htmlEntityDesc","synthetic":true,"types":[]},{"text":"impl Send for _xmlChSRange","synthetic":true,"types":[]},{"text":"impl Send for _xmlChLRange","synthetic":true,"types":[]},{"text":"impl !Send for _xmlChRangeGroup","synthetic":true,"types":[]},{"text":"impl !Send for _xmlNodeSet","synthetic":true,"types":[]},{"text":"impl !Send for _xmlXPathObject","synthetic":true,"types":[]},{"text":"impl !Send for _xmlXPathType","synthetic":true,"types":[]},{"text":"impl !Send for _xmlXPathVariable","synthetic":true,"types":[]},{"text":"impl !Send for _xmlXPathFunct","synthetic":true,"types":[]},{"text":"impl !Send for _xmlXPathAxis","synthetic":true,"types":[]},{"text":"impl !Send for _xmlXPathContext","synthetic":true,"types":[]},{"text":"impl Send for _xmlXPathCompExpr","synthetic":true,"types":[]},{"text":"impl !Send for _xmlXPathParserContext","synthetic":true,"types":[]},{"text":"impl Send for _xmlCatalog","synthetic":true,"types":[]},{"text":"impl !Send for _xmlShellCtxt","synthetic":true,"types":[]},{"text":"impl Send for _xmlPattern","synthetic":true,"types":[]},{"text":"impl Send for _xmlStreamCtxt","synthetic":true,"types":[]},{"text":"impl Send for _xmlRelaxNG","synthetic":true,"types":[]},{"text":"impl Send for _xmlRelaxNGParserCtxt","synthetic":true,"types":[]},{"text":"impl Send for _xmlRelaxNGValidCtxt","synthetic":true,"types":[]},{"text":"impl Send for _xmlSchemaVal","synthetic":true,"types":[]},{"text":"impl !Send for _xmlSchemaAnnot","synthetic":true,"types":[]},{"text":"impl !Send for _xmlSchemaAttribute","synthetic":true,"types":[]},{"text":"impl !Send for _xmlSchemaAttributeLink","synthetic":true,"types":[]},{"text":"impl !Send for _xmlSchemaWildcardNs","synthetic":true,"types":[]},{"text":"impl !Send for _xmlSchemaWildcard","synthetic":true,"types":[]},{"text":"impl !Send for _xmlSchemaAttributeGroup","synthetic":true,"types":[]},{"text":"impl !Send for _xmlSchemaTypeLink","synthetic":true,"types":[]},{"text":"impl !Send for _xmlSchemaFacetLink","synthetic":true,"types":[]},{"text":"impl !Send for _xmlSchemaType","synthetic":true,"types":[]},{"text":"impl !Send for _xmlSchemaElement","synthetic":true,"types":[]},{"text":"impl !Send for _xmlSchemaFacet","synthetic":true,"types":[]},{"text":"impl !Send for _xmlSchemaNotation","synthetic":true,"types":[]},{"text":"impl !Send for _xmlSchema","synthetic":true,"types":[]},{"text":"impl Send for _xmlSchematron","synthetic":true,"types":[]},{"text":"impl Send for _xmlSchematronParserCtxt","synthetic":true,"types":[]},{"text":"impl Send for _xmlSchematronValidCtxt","synthetic":true,"types":[]},{"text":"impl !Send for _xmlURI","synthetic":true,"types":[]},{"text":"impl Send for _xmlXIncludeCtxt","synthetic":true,"types":[]},{"text":"impl Send for _xmlModule","synthetic":true,"types":[]},{"text":"impl Send for _xmlSchemaParserCtxt","synthetic":true,"types":[]},{"text":"impl Send for _xmlSchemaValidCtxt","synthetic":true,"types":[]},{"text":"impl Send for _xmlSchemaSAXPlug","synthetic":true,"types":[]},{"text":"impl Send for _xmlTextReader","synthetic":true,"types":[]},{"text":"impl Send for _xmlSaveCtxt","synthetic":true,"types":[]},{"text":"impl Send for _xmlTextWriter","synthetic":true,"types":[]},{"text":"impl !Send for _xmlLocationSet","synthetic":true,"types":[]},{"text":"impl !Send for __va_list_tag","synthetic":true,"types":[]},{"text":"impl Send for __mbstate_t__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl Send for __pthread_cond_s__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl Send for __pthread_cond_s__bindgen_ty_2","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl !Send for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_barrier_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_barrierattr_t","synthetic":true,"types":[]},{"text":"impl Send for Parser","synthetic":true,"types":[]},{"text":"impl Send for XmlParseError","synthetic":true,"types":[]},{"text":"impl Send for ParseFormat","synthetic":true,"types":[]},{"text":"impl Send for SaveOptions","synthetic":true,"types":[]},{"text":"impl !Send for Document","synthetic":true,"types":[]},{"text":"impl !Send for Namespace","synthetic":true,"types":[]},{"text":"impl !Send for Node","synthetic":true,"types":[]},{"text":"impl Send for NodeType","synthetic":true,"types":[]},{"text":"impl !Send for StructuredError","synthetic":true,"types":[]},{"text":"impl !Send for Context","synthetic":true,"types":[]},{"text":"impl !Send for Object","synthetic":true,"types":[]},{"text":"impl !Send for SchemaParserContext","synthetic":true,"types":[]},{"text":"impl !Send for SchemaValidationContext","synthetic":true,"types":[]},{"text":"impl Send for RoNode","synthetic":false,"types":[]}];
implementors["llamapun"] = [{"text":"impl Send for LexicalOptions","synthetic":true,"types":[]},{"text":"impl Send for RESOURCE_DOCUMENTS","synthetic":true,"types":[]},{"text":"impl Send for StructuralEnv","synthetic":true,"types":[]},{"text":"impl Send for AmsEnv","synthetic":true,"types":[]},{"text":"impl !Send for Corpus","synthetic":true,"types":[]},{"text":"impl&lt;'iter&gt; !Send for DocumentIterator&lt;'iter&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; !Send for Document&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'iter&gt; !Send for ParagraphIterator&lt;'iter&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'p&gt; !Send for Paragraph&lt;'p&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'iter&gt; !Send for SentenceIterator&lt;'iter&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; !Send for Sentence&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'iter&gt; !Send for SimpleWordIterator&lt;'iter&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'iter&gt; !Send for SennaWordIterator&lt;'iter&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'w&gt; !Send for Word&lt;'w&gt;","synthetic":true,"types":[]},{"text":"impl Send for DNMParameters","synthetic":true,"types":[]},{"text":"impl Send for RuntimeParseData","synthetic":true,"types":[]},{"text":"impl&lt;'dnmrange&gt; Send for DNMRange&lt;'dnmrange&gt;","synthetic":true,"types":[]},{"text":"impl Send for DNM","synthetic":true,"types":[]},{"text":"impl Send for SpecialTagsOption","synthetic":true,"types":[]},{"text":"impl Send for Dictionary","synthetic":true,"types":[]},{"text":"impl Send for Ngrams","synthetic":true,"types":[]},{"text":"impl&lt;'p&gt; !Send for ItemDNM&lt;'p&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; !Send for ItemDNMRange&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'iter&gt; !Send for RoNodeIterator&lt;'iter&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'iter&gt; !Send for DNMRangeIterator&lt;'iter&gt;","synthetic":true,"types":[]},{"text":"impl Send for Corpus","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; !Send for Document&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for MathMarker","synthetic":true,"types":[]},{"text":"impl Send for PatternFile","synthetic":true,"types":[]},{"text":"impl Send for PatternMarker","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for TextMarker&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for MarkerEnum&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for Tokenizer","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Send for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl Send for IsaacRng","synthetic":true,"types":[]},{"text":"impl Send for Isaac64Rng","synthetic":true,"types":[]},{"text":"impl Send for ChaChaRng","synthetic":true,"types":[]},{"text":"impl Send for XorShiftRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, R&gt; Send for Generator&lt;'a, T, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Send for AsciiGenerator&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Open01&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Closed01&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for StdRng","synthetic":true,"types":[]},{"text":"impl !Send for ThreadRng","synthetic":true,"types":[]},{"text":"impl&lt;Sup&gt; Send for RandSample&lt;Sup&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Weighted&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for WeightedChoice&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for Range&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Gamma","synthetic":true,"types":[]},{"text":"impl Send for ChiSquared","synthetic":true,"types":[]},{"text":"impl Send for FisherF","synthetic":true,"types":[]},{"text":"impl Send for StudentT","synthetic":true,"types":[]},{"text":"impl Send for StandardNormal","synthetic":true,"types":[]},{"text":"impl Send for Normal","synthetic":true,"types":[]},{"text":"impl Send for LogNormal","synthetic":true,"types":[]},{"text":"impl Send for Exp1","synthetic":true,"types":[]},{"text":"impl Send for Exp","synthetic":true,"types":[]},{"text":"impl Send for JitterRng","synthetic":true,"types":[]},{"text":"impl Send for TimerError","synthetic":true,"types":[]},{"text":"impl Send for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Send for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ReseedWithDefault","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Chain&lt;A, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Chunks&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Cloned&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Copied&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Empty&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Enumerate&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for FlatMapIter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Flatten&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for FlattenIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; Send for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Send for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for Interleave&lt;I, J&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for InterleaveShortest&lt;I, J&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MaxLen&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MinLen&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; Send for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; Send for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Once&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for PanicFuse&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Send for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for Positions&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Repeat&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RepeatN&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Rev&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; Send for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; Send for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Send for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for WhileSome&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Zip&lt;A, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for ZipEq&lt;A, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for StepBy&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for Iter&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for Chunks&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for ChunksExact&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for Windows&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for IterMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for ChunksMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for ChunksExactMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Send for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Send for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for Split&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for SplitTerminator&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for Matches&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for MatchIndices&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Drain&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for Drain&lt;'data, T&gt;","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl Send for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Send for ThreadPool","synthetic":true,"types":[]},{"text":"impl Send for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;DefaultSpawn&gt; !Send for ThreadPoolBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Configuration","synthetic":true,"types":[]},{"text":"impl !Send for FnContext","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl Send for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexSet","synthetic":true,"types":[]},{"text":"impl Send for SetMatches","synthetic":true,"types":[]},{"text":"impl Send for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Send for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Send for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Send for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Send for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Send for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for RegexSet","synthetic":true,"types":[]},{"text":"impl Send for SetMatches","synthetic":true,"types":[]},{"text":"impl Send for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Send for Parser","synthetic":true,"types":[]},{"text":"impl Send for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Send for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Span","synthetic":true,"types":[]},{"text":"impl Send for Position","synthetic":true,"types":[]},{"text":"impl Send for WithComments","synthetic":true,"types":[]},{"text":"impl Send for Comment","synthetic":true,"types":[]},{"text":"impl Send for Alternation","synthetic":true,"types":[]},{"text":"impl Send for Concat","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for ClassPerl","synthetic":true,"types":[]},{"text":"impl Send for ClassAscii","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicode","synthetic":true,"types":[]},{"text":"impl Send for ClassBracketed","synthetic":true,"types":[]},{"text":"impl Send for ClassSetRange","synthetic":true,"types":[]},{"text":"impl Send for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl Send for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl Send for Assertion","synthetic":true,"types":[]},{"text":"impl Send for Repetition","synthetic":true,"types":[]},{"text":"impl Send for RepetitionOp","synthetic":true,"types":[]},{"text":"impl Send for Group","synthetic":true,"types":[]},{"text":"impl Send for CaptureName","synthetic":true,"types":[]},{"text":"impl Send for SetFlags","synthetic":true,"types":[]},{"text":"impl Send for Flags","synthetic":true,"types":[]},{"text":"impl Send for FlagsItem","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Ast","synthetic":true,"types":[]},{"text":"impl Send for LiteralKind","synthetic":true,"types":[]},{"text":"impl Send for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl Send for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl Send for Class","synthetic":true,"types":[]},{"text":"impl Send for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl Send for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl Send for ClassSet","synthetic":true,"types":[]},{"text":"impl Send for ClassSetItem","synthetic":true,"types":[]},{"text":"impl Send for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl Send for AssertionKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Send for GroupKind","synthetic":true,"types":[]},{"text":"impl Send for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl Send for Flag","synthetic":true,"types":[]},{"text":"impl Send for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Send for Parser","synthetic":true,"types":[]},{"text":"impl Send for Printer","synthetic":true,"types":[]},{"text":"impl Send for CaseFoldError","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Hir","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl Send for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl Send for Group","synthetic":true,"types":[]},{"text":"impl Send for Repetition","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for HirKind","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for Class","synthetic":true,"types":[]},{"text":"impl Send for Anchor","synthetic":true,"types":[]},{"text":"impl Send for WordBoundary","synthetic":true,"types":[]},{"text":"impl Send for GroupKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Send for Literals","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for Printer","synthetic":true,"types":[]},{"text":"impl Send for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl Send for Translator","synthetic":true,"types":[]},{"text":"impl Send for Utf8Range","synthetic":true,"types":[]},{"text":"impl Send for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl Send for Utf8Sequence","synthetic":true,"types":[]}];
implementors["rustc_serialize"] = [{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for CharacterSet","synthetic":true,"types":[]},{"text":"impl Send for Newline","synthetic":true,"types":[]},{"text":"impl Send for FromBase64Error","synthetic":true,"types":[]},{"text":"impl Send for FromHexError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PrettyJson&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for AsJson&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for AsPrettyJson&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Encoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Stack","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Parser&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Builder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Decoder","synthetic":true,"types":[]},{"text":"impl Send for Json","synthetic":true,"types":[]},{"text":"impl Send for ErrorCode","synthetic":true,"types":[]},{"text":"impl Send for ParserError","synthetic":true,"types":[]},{"text":"impl Send for DecoderError","synthetic":true,"types":[]},{"text":"impl Send for EncoderError","synthetic":true,"types":[]},{"text":"impl Send for JsonEvent","synthetic":true,"types":[]},{"text":"impl&lt;'l&gt; Send for StackElement&lt;'l&gt;","synthetic":true,"types":[]}];
implementors["same_file"] = [{"text":"impl Send for Handle","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl&lt;T, F, S&gt; Send for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Always","synthetic":true,"types":[]}];
implementors["senna"] = [{"text":"impl Send for SennaParseOptions","synthetic":true,"types":[]},{"text":"impl !Send for Senna","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Word&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Sentence&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for PSGPhrase","synthetic":true,"types":[]},{"text":"impl Send for PSGNode","synthetic":true,"types":[]},{"text":"impl Send for POS","synthetic":true,"types":[]},{"text":"impl Send for Phrase","synthetic":true,"types":[]}];
implementors["tar"] = [{"text":"impl&lt;R:&nbsp;?Sized&gt; Send for Archive&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !Send for Entries&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Builder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !Send for Entry&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl Send for GnuExtSparseHeader","synthetic":true,"types":[]},{"text":"impl Send for GnuHeader","synthetic":true,"types":[]},{"text":"impl Send for GnuSparseHeader","synthetic":true,"types":[]},{"text":"impl Send for Header","synthetic":true,"types":[]},{"text":"impl Send for OldHeader","synthetic":true,"types":[]},{"text":"impl Send for UstarHeader","synthetic":true,"types":[]},{"text":"impl&lt;'entry&gt; Send for PaxExtension&lt;'entry&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'entry&gt; Send for PaxExtensions&lt;'entry&gt;","synthetic":true,"types":[]},{"text":"impl Send for Unpacked","synthetic":true,"types":[]},{"text":"impl Send for EntryType","synthetic":true,"types":[]},{"text":"impl Send for HeaderMode","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; !Send for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl Send for Duration","synthetic":true,"types":[]},{"text":"impl Send for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl Send for Timespec","synthetic":true,"types":[]},{"text":"impl Send for PreciseTime","synthetic":true,"types":[]},{"text":"impl Send for SteadyTime","synthetic":true,"types":[]},{"text":"impl Send for Tm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TmFmt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]}];
implementors["walkdir"] = [{"text":"impl Send for DirEntry","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for WalkDir","synthetic":true,"types":[]},{"text":"impl Send for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for FilterEntry&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["whatlang"] = [{"text":"impl Send for Detector","synthetic":true,"types":[]},{"text":"impl Send for Info","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for Lang","synthetic":true,"types":[]},{"text":"impl Send for Script","synthetic":true,"types":[]}];
implementors["xattr"] = [{"text":"impl Send for UnsupportedPlatformError","synthetic":true,"types":[]},{"text":"impl Send for XAttrs","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()